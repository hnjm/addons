from odoo import api, models, fields, _
from odoo.exceptions import UserError, ValidationError
from odoo.tools.float_utils import float_compare, float_is_zero, float_round
from collections import defaultdict


class SaleOrder(models.Model):
    _inherit = 'sale.order'

    status_invoice = fields.Selection([
        ('fully_paid', 'Fully Paid'),
        ('not_paid', 'Not Paid'),
        ('partially_paid', 'Partially Paid'),
        ('no_invoice', ' ')
    ], string='Status of Invoice', compute_sudo='True', compute='_compute_status_invoice')

    def _compute_status_invoice(self):
        for record in self:
            record.status_invoice = 'no_invoice'
            if record.state == 'sale' and record.invoice_ids and not record.invoice_ids.filtered(lambda x: x.payment_state not in ['paid']):
                total = record.amount_total
                total_invoice = sum(i.amount_total for i in record.invoice_ids.filtered(lambda x: x.payment_state in ['paid']))
                if 0 < total_invoice < total:
                    record.status_invoice = 'partially_paid'
                if total_invoice == total:
                    record.status_invoice = 'fully_paid'
            if record.state == 'sale' and record.invoice_ids and not record.invoice_ids.filtered(lambda x: x.payment_state in ['paid', 'partial']):
                record.status_invoice = 'not_paid'
            if record.state == 'sale' and record.invoice_ids and record.invoice_ids.filtered(lambda x: x.payment_state in ['partial']):
                total = record.amount_total
                total_invoice = sum(
                    i.amount_total for i in record.invoice_ids.filtered(lambda x: x.payment_state in ['partial', 'paid']))
                if 0 < total_invoice < total:
                    record.status_invoice = 'partially_paid'
                if total_invoice == total:
                    record.status_invoice = 'fully_paid'
                # record.status_invoice = 'partially_paid'

    @api.model
    def create(self, vals):
        if 'name' not in vals or vals['name'] == _('New'):
            vals['name'] = self.env['ir.sequence'].next_by_code('sale.order.sequence.abc') or _('New')
        return super(SaleOrder, self).create(vals)

    def loop_child_mrp(self, child_mrp, line):
        model = self.env['mrp.production']
        arr = []
        for item in child_mrp:
            child = model.search([('origin', '=', item.name)])
            self.loop_child_mrp(child, line)
            arr.append({
                'so': line.origin,
                'child_id': item.id
            })
            for not_origin in child:
                arr.append({
                    'so': line.origin,
                    'child_id': not_origin.id
                })
        res = [{'so': line.origin, 'child_id': line.id}] + arr
        return res

    def show_mrp(self):
        seen = set()
        result = []
        model = self.env['mrp.production']
        procurement_groups = self.env['procurement.group'].search([('sale_id', 'in', self.ids)])
        mrp_production_ids = set(procurement_groups.stock_move_ids.created_production_id.ids) |\
            set(procurement_groups.mrp_production_ids.ids)
        mrp = self.env['mrp.production'].browse(mrp_production_ids)
        res = []
        for line in mrp:
            child_mrp = model.search([('origin', '=', line.origin)])
            if child_mrp:
                res += self.loop_child_mrp(child_mrp, line)
        return res

    def action_view_mrp_production(self):
        self.ensure_one()
        mrp_production_ids = self.show_mrp()
        arr = []
        for i in mrp_production_ids:
            arr.append(i['child_id'])
        action = self.env.ref('custom_sale.abc_action_mrp_production_custom').read()[0]
        action.update({
            'res_model': 'mrp.production',
            'type': 'ir.actions.act_window',
            'name': _("Manufacturing Orders Generated by %s", self.name),
            'domain': [('id', 'in', arr)],
            'view_mode': 'tree,form',
        })
        return action

    def action_confirm(self):
        res = super(SaleOrder, self).action_confirm()
        self.confirm_so_to_mo_get_name(self)
        return res

    def loop_child_mrp_all_data(self, child_mrp, line, name_so):
        model = self.env['mrp.production']
        arr = []
        key = name_so
        for item in child_mrp:
            child = model.search([('origin', '=', item.name)])
            self.loop_child_mrp_all_data(child, line, name_so)
            arr.append({key: {
                'so': name_so,
                'child_id': item.id
            }})
            for not_origin in child:
                arr.append({key: {
                    'so': name_so,
                    'child_id': not_origin.id
                }})
        res = [{key: {'so': name_so, 'child_id': line.id}}] + arr
        return res

    def confirm_so_to_mo_get_name(self, sale_order):
        res = []
        seen = set()
        result = []
        model = self.env['mrp.production']
        for item_so in sale_order:
            procurement_groups = self.env['procurement.group'].search([('sale_id', 'in', item_so.ids)])
            mrp_production_ids = set(procurement_groups.stock_move_ids.created_production_id.ids) | \
                                 set(procurement_groups.mrp_production_ids.ids)
            mrp = self.env['mrp.production'].browse(mrp_production_ids)
            for line in mrp:
                child_mrp = model.search([('origin', '=', line.origin)])
                arr_str = []
                for ce in child_mrp:
                    arr_str.append(ce.sale_id.name)
                if child_mrp:
                    if arr_str:
                        res += self.loop_child_mrp_all_data(child_mrp, line, arr_str[0])
        dd = defaultdict(list)
        arr_key, arr_res = [], []
        for d in res:
            for key, value in d.items():
                dd[key].append(value)
                arr_key.append(key)
        arr_check = list(dict.fromkeys(arr_key))
        for child_key in arr_check:
            arr_res.append(dd[child_key])
        for item_dic in arr_res:
            data_child = []
            for dic in item_dic:
                key = (dic['child_id'])
                if key in seen:
                    continue
                data_child.append(dic)
                seen.add(key)
            if not data_child:
                continue
            result.append(data_child)
        for stt in result:
            for j, line_stt in enumerate(stt):
                check = model.search([('id', '=', int(line_stt['child_id']))])
                check.sequence_mrp = j
                origin = self.env['mrp.production'].search([('origin', '=', check.name)])
                convert_name = check.name.split('/')
                res_name = convert_name[0] + '/' + convert_name[1]
                check.name = '{}.{}'.format(res_name + '/' + str(line_stt['so'])[1:], str(j + 1).zfill(3))
                check.mrp_ref = '{}.{}'.format(res_name + '/' + str(line_stt['so'])[1:], str(j + 1).zfill(3))
                for io in origin:
                    io.origin = check.name
                check.mrp_ref = check.name
        return res

    def set_name_mo(self):
        sale_order = self.env['sale.order'].search([
            ('state', '=', 'sale')
        ])
        self.confirm_so_to_mo_get_name(sale_order)



